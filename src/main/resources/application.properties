server.port=8082
server.servlet.context-path=/kafka-demo
# mysql相关配置
#spring.datasource.url=jdbc:mysql://192.168.1.210:3307/zsy_cloud_marking?useUnicode=true&characterEncoding=utf-8
#spring.datasource.username=zsy
#spring.datasource.password=lc12345
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver


#====================================== kafka ======================================
# 指定kafka 代理地址，可以多个
spring.kafka.bootstrap-servers=192.168.1.239:9092,192.168.1.247:9092,192.168.1.248:9092

# spring.kafka.listener.poll-timeout=5000

#====================================== producer  ======================================
#如果该值大于零时，表示启用重试失败的发送次数
spring.kafka.producer.retries=0
#每当多个记录被发送到同一分区时，生产者将尝试将记录一起批量处理为更少的请求，
#这有助于提升客户端和服务器上的性能，此配置控制默认批量大小（以字节为单位），默认值为16384
spring.kafka.producer.batch-size=16384
#生产者可用于缓冲等待发送到服务器的记录的内存总字节数，默认值为33554432
spring.kafka.producer.buffer-memory=33554432

# 指定消息key和消息体的编解码方式
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#====================================== consumer ======================================
# 指定默认消费者group id
spring.kafka.consumer.group-id=test-group-01

#当Kafka中没有初始偏移量或者服务器上不再存在当前偏移量时该怎么办，默认值为latest，表示自动将偏移重置为最新的偏移量
#可选的值为latest, earliest, none
#earliest
#当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费
#latest
#当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，消费新产生的该分区下的数据
#none
#topic各分区都存在已提交的offset时，从offset后开始消费；只要有一个分区不存在已提交的offset，则抛出异常
spring.kafka.consumer.auto-offset-reset=earliest
#如果为true，则消费者的偏移量将在后台定期提交，默认值为true(consumer定期地往zookeeper写入每个分区的offset)
#spring.kafka.consumer.enable-auto-commit=true
spring.kafka.consumer.enable-auto-commit=false
# 往zookeeper上写offset的频率
# 如果'enable.auto.commit'为true，则消费者偏移自动提交给Kafka的频率（以毫秒为单位），默认值为5000
#spring.kafka.consumer.auto-commit-interval=1000
#手动提交偏移量
spring.kafka.listener.ack-mode=manual
spring.kafka.consumer.max-poll-records=10



# 指定消息key和消息体的编解码方式
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

